/* 
ADDING CSS TO HTML
  INLINE   <tag style="css"/>
    <html style="property_to_change:Value_of_property"></html>

    useful when you only want to target a single element
    good for adding only single attributes to the page    this method is not recommeded for the entire document
    always goes in only the OPENING tag of any element

  INTERNAL    <style>css</>
    <html>
      <head>
        <style>    CSS
          tag {property:value;}       internal style can be applied anywhere within the same html document
          
          selector {property:value} the css goes inbetween the {css} on multiple lines in between
            this method is good when you want to only apply the style to one html document. 
            not good to use with mutlipage websites.
      
        </style>  CSS
      </head>
    </html>

 
  EXTERNAL  <link href="style.css"/>
  <html>
    <head>
      <link   CSS
      rel="stylesheet"  the role of what we are linking too
      href="./style.css"    where is it located

        the css lives in a different file. 
        this style is what is most commonly used in webdev

      />     CSS
    </head>
  </html>
/*


CSS SELECTORS
/*this is element selector e.g p-element*/
p {color: rgb(0, 0, 0);} 

/*this is class selector  */
.class {font-size:20px;} 

/*this is id selecter*/
#id-name {color: green;} 

/*this is element with specific attribute selector*/
li[value="4"]{color: blue} 

/*universal selector*/
 *{text-align: center;} 


/* FONT PROPERTIES
change font size with px amount
pt   = stands for points slightly bigger than px. in MS word you are settings a font point
1em   = 1 full width of letter m | when h1 is set like 1em will be 100% the size of parent tag like <body><h1></h1></body>
1rem   = relative to the root html element like the opening <html> (the tag that encloses the entire document)

FONT SIZE  */
#pixel {font-size: 20px;}
  #point {font-size: 20pt;}
  #em {font-size: 1em;}
  #rem {font-size: 1rem;}
  footer {font-size: 12pt;}
  html {font-size: xx-large;}


/*FONT-FAMILY
determines what you want your text to look like
we write  {font-family: 1st choice font, backup font}

fonts.google.com has loads of diferent fonts
download the font make sure link is selected
in the head element after the <style> paste in the 
*/
#helvetica {font-family: Helvetica, sans-serif;}
#arial {font-family: Arial, sans-serif;}
#serif {font-family: serif;}
#sans-serif {font-family: sans-serif;}
#cursive {font-family: cursive;}
#monospace {font-family: monospace;}
#fantasy {font-family: fantasy;}


/*FONT WEIGHT 
keywords = normal:, bold;, bolder;
relative to parent tag = lighter;, bolder;  = subtracts and adds 100
number = 100-900;  = how light or how bold you want the font to be
*/
#font-weight {font-weight: bold;}


h1 {
    color: blue;
    font-weight: bold;
    font-size: 20px;
    font-family: sans-serif;
}

/*TEXT ALIGN
change the alignment of the text
*/
#text_align {text-align: right}
#div_circle {border-radius: 50%;}



/*BOX MODEL
we can set {width:number-px;} 
           {height:number-%;} will change to take up number-% of the page
           
we can set borders as well:   
{border: thickness-px style(dashed/solid) color(any name color);
  border-width: top-px right-px   bottom-px left-px;  
   can also do     top/bottom           left/right; 
}
the border does not change the height of the. the sequential typing of these 

PADDING   tag{padding: 0px;}
adds padding between element and the border line.
Sits between the element and border

MARGIN tag{margin: 10px;}
adds a invisible margin after the border
*/



/*
SPECIFICITY and INHERITENCE 
determines which rule will apply to the element when multiple rules are at play.
The Ranking of each element is synonymous with importance over previous rules.
 so  a TYPE selector will beat  the latest of a selector

POSITION:
later CSS styles in a CSS selector will prevail over the top ones
li { color: red;  --- 2
     color: blue; --- 1 
   }

SELECTOR SPECIFICTY:
li {color:blue;}            ---4 element selector
.first-class{color:red;}    ---3 class selecter 
li[draggable] {color: red;} ---2 attribute
#first-id {color: Orange;}  ---1 id selector. generally in a file only 1 id will be used for a particular style. hence it is most specific

TYPE:
Depending on what type of css stlying type you are using:
<link rel="stylesheet" href="./stylesheet.css"> ---3 external 
<style> CSS </style>                            ---2 internal 
<h1 style="CSS">content</h1>                    ---1 inline 

IMPORTANCE:
where you place the " CSS: style !important;" rule in
h1 {color : green;
    color: blue !important;
    }
the color will be blue 
*/




/* 
COMBINING CSS SELECTORS
allows you to 
GROUP rule: --- Applies everything to each of the selector elements
selector, selector {color: blue;}
html: <body>
        <h1>blueviolet text</h1>
        <h2>blueviolet text</h2>
      </body>
CSS: h1, h2 {color: blueviolet;}

CHILD: ---Apply to direct child of left side
parent_selector > child_selector {color: firebrick;}
html: <div>
        <ol>
          <li>purple text</li>
        </ol>
      </div>
CSS: div > li {color: purple;}

DECENDANT: ---Apply to a decendent selector this is better than the parent-child selector.
ancestor_selector decendant_selector {color:blue}

  html: <div class="box">
          <h1>red text</h1>
        </div>
  CSS: .box h1 {color: red;}

CHAINING: --- Apply where all selectors are true
element selectors must go first before id and class
selectorselector {
  color:green;
  }  
  html: <h1 id="title" class="big heading"> blue text</h1>
  CSS : h1#title.big.heading {
    color: blue;}


COMBINING COMBINERS
ancestor chained_selector_selector {font-size: 0.5rem;}
 */



/* 
CSS POSITIONING syntax= element {position: position_type;}
STATIC: HTML default flow.
Each item is positioned at the bottom of the prior element

RELATIVE: Position relative to default position
you can move the element to a new place relative to its original position.
relative specifically to its original position
CSS box {position: relative;
         left: 50px;
         top: 50px;
        }

ABSOLUTE: Position relative to nearest positioned ancestor or top left corner of webpage
z-index changes the overlay effect of the element
element {z-index: int;} the default is set to 0


FIXED: position relative to the top left corner of the browser window. scrolling will not change the position of this element 
*/


/* CSS DISPLAYS synax= element {display: property}
PROPERTY:
:inline = will make the element appear in the same line until no newer lines can be fit to the width of the elements.
        the property will stretch to fit the entire element

:block = elements will go on to the next line irrelavent if space is empty still in the first line.

:inline-block = inline part allows us to have parts of element on same line
                block part allows us to set the width and height. to help us determine the layout of our website

:None = will make the element dissapear 

 */


 /* CSS FLOAT syntax = element {float: left; right;}
 causes the image element to squeeze next to the text 

to make the footer not wrap around the image. footer {clear: left; right; both;} will cause it to be positioned after the image 
 
 */



/*RESPONSIVE WEB DESIGN to sizing
Media Queries = after sepcifiying a size you put in all css inside the {}
--------specify----------
@media (max-width: 600px) {element {CSS} for screens below or equal to 600px wide }

CSS Grid = use a bunch of divs with different alignment, each div.
grid-template-columns: 1fr 1fr == specifies 2 columns that are 1fraction each one being equal
grid-template-rows: 100px, 200px, 200px == specifies that the top row should have 100px, second 200px, third 200px.
gap: 30px == each box should have 30px distance between each other  


.first {grid-column: span 2;} == makes the top most coloumn span 2 columns
html:                                           CSS:                                
<div class="grid-container">                    .grid-container: {display: grid; grid-template-columns: 1fr 1fr;                              
  <div class="first card"></div>                                gird-template-rows: 100px, 200px, 200px; gap: 30px;
  <div class="card"></div>                      .first {grid-column: span 2;}                               
  <div class="card"></div>                               
  <div class="card"></div>                      .card {background-color: blue;}                                     
  <div class="card"></div>                                                            
  <div class="card"></div>                                                            
<div class="card"></div>
</div>





CSS Flexbox
good for 1D layout of your webpage  [] [--] [-] [---]

flex: 2; == means the layout will have 2x the width of 1 unchanged flex

<div class="flex-container>               .flex-container {display: flex;}                                                                
  <div class="first card"></div>          .card {background: blue; border: 30px solid white;                                                                      
  <div class="second card"></div>               height: 100px; flex: 1;                                                                     
  <div class="card"></div>                .first {flex:2;}                                   
  <div class="card"></div>                .second {flex: 0.5;}                                                  
  <div class="card"></div>                                                                                                                                                              
</div>

External frameworks e.g Bootstrap

*/


/* MEDIA QUERY IN_DEPTH

Documentation: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries

@media (**) {element {CSS;}}
**= can be 'max-width' for smaller screens  or 'min-width' for larger screens

can be combined as well
@media (min-width: 600px) and (max-width: 900px){CSS;}
will target screens between 600-900px

@media(max-width:600px) and (min-width: 900px){CSS}
target anything smaller than 00px OR greater than 900 px


Device
@media screen/print(orientation: landscape){CSS;}
generally not necessary. 
print is used to target the website when it is being printed
*/



/* CSS FLEXBOX
USE this for overall page layout/structure
To use flexbox all you have to do is wrap the contents inside <div>s then target
the <div class="container"> 
CSS .container {display: flex; gap: 10px;}

the flex property will try to make all your content be displayed inline irrelevent of what type of element yo have inside
gap:px; allows us to change how much spacing there is between each element.
by defualt element {display: flex;} will be a block element.

element {display: inline-flex;} makes the element be inline but only to the width of the conetents combined inside

*/